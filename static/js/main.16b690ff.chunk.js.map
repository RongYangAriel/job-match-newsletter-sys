{"version":3,"sources":["logo.svg","components/EmailTemplate.js","components/MatchTable.js","components/Email.js","components/ExcelImport.js","App.js","reportWebVitals.js","index.js"],"names":["EmailTemplate","props","handleClick","toggle","handleChange","event","newState","state","email","body","target","value","setState","console","log","fromChangeHandler","from","subjectChangeHandler","subject","handleSubmit","templateReady","to","className","onClick","this","type","onChange","Button","color","variant","hidden","Component","standards","MatchTable","useState","cols","talent","name","key","rows","table","setTable","isbuilt","setIsBuilt","ready","setReady","findJobLink","jobScoreArray","index","jobTalbe","jd","slice","jobLinkPosition","indexOf","joblinks","eachJob","push","useEffect","talentMap","jdMap","standard","length","buildStandardTable","sortedResult","matchResult","talentTable","jobTable","talentIndex","jobIndex","jobTalentScore","Object","entries","sort","a","b","matchingAlgo","newTableRows","eachJobLink","buildTable","emailText","findJobs","data","columns","tableClassName","CircularProgress","Email","ExcelImporter","talentHandler","fileObj","files","ExcelRenderer","err","res","dataLoaded","alert","jdHandler","matchData","emailPop","emailPoped","previewPop","previewPoped","matchedJobs","talentName","location","seniority","techstack","IOM","jobLinks","linkedIn","emailTemplate","matchedPosition","close","bind","component","accept","App","ExcelImport","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAe,I,2EC8FAA,E,kDAxFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAcVC,YAAc,WACV,EAAKD,MAAME,UAhBI,EAmBnBC,aAAe,SAACC,GACZ,IAAMC,EAAQ,2BAAO,EAAKC,MAAMC,OAAlB,IAAyBC,KAAMJ,EAAMK,OAAOC,QAC1D,EAAKC,SAAU,CACXJ,MAAOF,IACR,WACCO,QAAQC,IAAI,EAAKP,MAAMC,WAxBZ,EA4BnBO,kBAAoB,SAACV,GACjB,IAAMC,EAAQ,2BAAO,EAAKC,MAAMC,OAAlB,IAAyBQ,KAAMX,EAAMK,OAAOC,QAC1D,EAAKC,SAAU,CACXJ,MAAOF,IACR,WACCO,QAAQC,IAAI,EAAKP,MAAMC,WAjCZ,EAsCnBS,qBAAuB,SAACZ,GACpB,IAAMC,EAAQ,2BAAO,EAAKC,MAAMC,OAAlB,IAAyBU,QAASb,EAAMK,OAAOC,QAC7D,EAAKC,SAAU,CACXJ,MAAOF,IACR,WACCO,QAAQC,IAAI,EAAKP,MAAMC,WA3CZ,EAiDnBW,aAAe,SAACd,GAEZ,EAAKO,SAAL,2BAAkB,EAAKL,MAAMC,OAA7B,IAAoCY,eAAe,MAhDnD,EAAKb,MAAS,CACVC,MAAO,CACHC,KAAM,EAAKR,MAAMQ,KACjBO,KAAM,EAAKf,MAAMe,KACjBK,GAAI,KACJH,QAAS,EAAKjB,MAAMiB,SAExBE,eAAe,GAVJ,E,0CAuDnB,WACI,OACE,sBAAKE,UAAU,QAAf,UACE,qBAAKA,UAAU,QAAQC,QAASC,KAAKtB,YAArC,sBACA,qBAAIoB,UAAU,qBAAd,UACI,sCACI,uBAAOG,KAAK,QAAQC,SAAUF,KAAKT,uBAEvC,6BAAKS,KAAKvB,MAAMe,OAEhB,oCACA,6BAAKQ,KAAKvB,MAAMoB,KAEhB,yCACI,uBAAOI,KAAK,OAAOC,SAAUF,KAAKP,0BAEtC,6BAAKO,KAAKvB,MAAMiB,aAEpB,iCACI,0BAAUO,KAAK,OAAOH,UAAU,OAAOX,MAAOa,KAAKjB,MAAMC,MAAMC,KAAMiB,SAAUF,KAAKpB,eACpF,eAACuB,EAAA,EAAD,CAAQL,UAAU,WAAWM,MAAM,UAAUC,QAAQ,YAArD,iBAEI,uBAAQJ,KAAK,SAASd,MAAM,OAAQmB,QAAM,EAACP,QAASC,KAAKL,4B,GA/EjDY,a,gCCEtBC,EAAY,CAAC,WAAY,YAAa,YAAa,OA2L1CC,EAtLI,SAAChC,GAAW,IAAD,EAEAiC,mBAAS,CAC/BC,KAAK,GAAD,mBAAMlC,EAAMmC,OAAOD,MAAnB,CACA,CAACE,KAAM,IAAKC,IAAK,IACjB,CAACD,KAAM,SAAUC,IAAK,IACtB,CAACD,KAAM,SAAUC,IAAK,IACtB,CAACD,KAAM,SAAUC,IAAK,IACtB,CAACD,KAAM,SAAUC,IAAK,IACtB,CAACD,KAAM,SAAUC,IAAK,IACtB,CAACD,KAAM,UAAWC,IAAK,MAC3BC,KAAK,YAAKtC,EAAMmC,OAAOG,QAXD,mBAEnBC,EAFmB,KAEZC,EAFY,OAaGP,oBAAS,GAbZ,mBAanBQ,EAbmB,KAaXC,EAbW,OAcAT,oBAAS,GAdT,mBAcnBU,EAdmB,KAcZC,EAdY,OAgBFX,mBAAS,IAhBP,mBAsGpBY,GAtGoB,UAsGN,SAACC,EAAeC,GAChC,IAD0C,EACtCC,EAAW,YAAIhD,EAAMiD,GAAGX,MAAMY,MAAM,GACpCC,EAAkB,YAAInD,EAAMiD,GAAGX,KAAK,IAAIc,QA3GxC,UA4GAC,EAAW,GAH2B,cAIvBP,GAJuB,IAI1C,IAAI,EAAJ,qBAAkC,CAAC,IAA3BQ,EAA0B,QAE9BD,EAASE,KAAKP,EAASM,EAAQ,IAAIH,KANG,8BAU1C,OAAOE,IA2DX,OA/BAG,qBAAU,WAAO,IAAD,EAvHW,WACvB,IAD6B,EACzBC,EAAY,GACZC,EAAQ,GAFiB,cAGR3B,GAHQ,IAG7B,2BACI,IAD6B,IAAxB4B,EAAuB,QACnBZ,EAAQ,EAAGA,EAAQ/C,EAAMmC,OAAOG,KAAK,GAAGsB,OAAQb,IAClD/C,EAAMmC,OAAOG,KAAK,GAAGS,KAAWY,IAC/BF,EAAUE,GAAYZ,GANL,kDAURhB,GAVQ,IAU7B,2BACI,IAD6B,IAAxB4B,EAAuB,QACnBZ,EAAQ,EAAGA,EAAQ/C,EAAMiD,GAAGX,KAAK,GAAGsB,OAAQb,IAC9C/C,EAAMiD,GAAGX,KAAK,GAAGS,KAAWY,IAC3BD,EAAMC,GAAYZ,GAbD,8BAmB7B,MAAO,CAACU,YAAWC,SAsGSG,GACrBC,EAlGU,SAAC,GASlB,IAT0C,IAAvBL,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAE1BK,EAAc,GACdD,EAAe,GAEfE,EAAchE,EAAMmC,OAAOG,KAAKY,MAAM,GACtCe,EAAWjE,EAAMiD,GAAGX,KAAKY,MAAM,GAG1BgB,EAAc,EAAGA,EAAcF,EAAYJ,OAAQM,IAAgB,CAExEH,EAAYG,GAAe,GAC3BJ,EAAaI,GAAe,GAE5B,IAAK,IAAIC,EAAW,EAAGA,EAAWF,EAASL,OAAQO,IAAc,CAC7D,IAD6D,EACzDC,EAAiB,EADwC,cAGxCrC,GAHwC,IAG7D,2BAAgC,CAAC,IAAxB4B,EAAuB,QAGxBK,EAAYE,GAAaT,EAAUE,MAAeM,EAASE,GAAUT,EAAMC,KAC3ES,KAPqD,8BAW7DL,EAAYG,GAAZ,UAA4BC,IAAcC,EAG9CN,EAAaI,GAAeG,OAAOC,QAASP,EAAYG,IAAcK,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAE,GAAKD,EAAE,MAAItB,MAAM,EAAE,GAU7G,OAJAtC,QAAQC,IAAI,sBAAuBiD,GAI3BA,EA4DcY,CAAa,CAACjB,UAHxB,EAELA,UACuCC,MAHlC,EAEOA,QAEfiB,EA5BW,SAACb,GAChB,IAAIa,EAAY,YAAO3E,EAAMmC,OAAOG,MACpC,IAAgB,IAAZG,EAAmB,CAEnB,IAAK,IAAIM,EAAQ,EAAGA,EAAQe,EAAaF,OAASb,IAAU,CACxD,IADwD,EACpDM,EAAWR,EAAYiB,EAAaf,IADgB,cAGhCM,GAHgC,IAGxD,2BAAkC,CAAC,IAA1BuB,EAAyB,QAC9BD,EAAa5B,EAAQ,GAAIQ,KAAKqB,IAJsB,+BAS5D,OADAlC,GAAW,GACJiC,EAEP,OAAOA,EAaQE,CAAWf,GAC1BgB,EAzDS,SAAChB,GAGd,IAFA,IAAIG,EAAW,YAAIjE,EAAMiD,GAAGX,MAAMY,MAAM,GACpC4B,EAAY,GACP/B,EAAQ,EAAGA,EAAQe,EAAaF,OAAQb,IAAU,CACvD+B,EAAU/B,GAAS,GADoC,oBAEnCe,EAAaf,IAFsB,IAEvD,2BAAyC,CAAC,IAAjCO,EAAgC,QACrCwB,EAAU/B,GAAOQ,KAAKU,EAASX,EAAQ,MAHY,+BAM3D,OAAOwB,EAgDSC,CAASjB,GAEzBtB,EAAS,CACLN,KAAK,YAAKK,EAAML,MAChBI,KAAMqC,IAEV/B,GAAS,GACThC,QAAQC,IAAIiE,KACb,CAACrC,IAEJe,qBAAU,WACN5C,QAAQC,IAAI,eAAgB0B,KAC9B,CAACA,IAEHiB,qBAAU,WACN5C,QAAQC,IAAI,iBAAkB4B,KAChC,CAACA,IAEHe,qBAAU,WACN5C,QAAQC,IAAI,eAAgB8B,KAC9B,CAACA,IAEHa,qBAAU,WACNd,GAAW,KACZ,CAAC1C,IAIA,qBAAKqB,UAAU,QAAf,SACIsB,EAAS,cAAC,WAAD,CAAUqC,KAAMzC,EAAMD,KAAM2C,QAAS1C,EAAML,KAAOgD,eAAe,qBAAuB,cAACC,EAAA,EAAD,OC1K9FC,G,YAZD,SAACpF,GACX,OACI,sBAAKqB,UAAU,QAAf,UACI,sDACA,uBAAOG,KAAK,WACZ,qBAAKH,UAAU,QAAQC,Q,UAAcrB,YAArC,sBAEA,4BAAID,EAAMO,MAAMC,YCwLb6E,E,kDAvLX,WAAYrF,GAAO,IAAD,8BAClB,cAAMA,IA8CNsF,cAAgB,SAAClF,GACb,IAAImF,EAAUnF,EAAMK,OAAO+E,MAAM,GACjCC,wBAAcF,GAAS,SAACG,EAAKC,GACrBD,EACA9E,QAAQC,IAAI,QAAS6E,GAErB,EAAK/E,SAAS,CACVwB,OAAQ,CACJD,KAAKyD,EAAIzD,KACTI,KAAKqD,EAAIrD,KACTsD,YAAW,KAEhB,WACChF,QAAQC,IAAI,EAAKP,OACjBuF,MAAM,kCA7DJ,EAoElBC,UAAY,SAAC1F,GACT,IAAImF,EAAUnF,EAAMK,OAAO+E,MAAM,GACjCC,wBAAcF,GAAS,SAACG,EAAKC,GACrBD,EACA9E,QAAQC,IAAI,QAAS6E,GAErB,EAAK/E,SAAS,CACVsC,GAAI,CACAf,KAAKyD,EAAIzD,KACTI,KAAKqD,EAAIrD,KACTsD,YAAW,KAEhB,WACChF,QAAQC,IAAI,EAAKP,OACjBuF,MAAM,sCAlFJ,EAwFlBE,UAAY,WACJ,EAAKzF,MAAM6B,OAAOyD,YAAc,EAAKtF,MAAM2C,GAAG2C,YAC9C,EAAKjF,SAAS,CAACiF,YAAY,IAAO,WAC9BhF,QAAQC,IAAI,EAAKP,WA3FX,EAgGlB0F,SAAW,SAAC5F,GACR,EAAKO,SAAS,CACVsF,YAAc,EAAK3F,MAAM2F,aAC1B,WACCrF,QAAQC,IAAI,EAAKP,WApGP,EAwGlB4F,WAAa,SAAC9F,GACV,EAAKO,SAAS,CACVsF,YAAc,EAAK3F,MAAM6F,eAC1B,WACCvF,QAAQC,IAAI,EAAKP,WAzGzB,EAAKA,MAAQ,CACT6B,OAAO,CACHD,KAAM,KACNI,KAAM,KACNsD,YAAY,GAEhB3C,GAAI,CACAf,KAAM,KACNI,KAAM,KACNsD,YAAY,GAEhBQ,YAAa,CACTlE,KAAM,CACFmE,WAAY,cACZ9F,MAAM,SACN+F,SAAU,YACVC,UAAW,YACXC,UAAW,aACXC,IAAK,MACLC,SAAU,YACVC,SAAU,IAEdrE,KAAM,KACNsD,YAAY,GAEhBgB,cAAe,CACX3F,QAAS,KACTT,KAAM,8VACNqG,gBAAiB,KACjBC,MAAO,gBACP/F,KAAM,MAEVkF,YAAY,EACZL,YAAY,EACZO,cAAa,GAIjB,EAAKb,cAAgB,EAAKA,cAAcyB,KAAnB,gBACrB,EAAKjB,UAAY,EAAKA,UAAUiB,KAAf,gBACjB,EAAKf,SAAW,EAAKA,SAASe,KAAd,gBAChB,EAAKhB,UAAY,EAAKA,UAAUgB,KAAf,gBA5CC,E,0CAgHlB,WAGI,OACA,sBAAK1F,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,UAEI,eAACK,EAAA,EAAD,CAAQE,QAAQ,YAAYD,MAAM,UAAUqF,UAAU,QAAtD,0BAEI,uBAAOxF,KAAK,OAAOyF,OAAO,8FAA8FxF,SAAYF,KAAK+D,cAAezD,QAAM,OAGlK,eAACH,EAAA,EAAD,CAAQE,QAAQ,YAAYD,MAAM,UAAUqF,UAAU,QAAtD,sBAEI,uBAAOxF,KAAK,OAAOyF,OAAO,8FAA8FxF,SAAYF,KAAKuE,UAAWjE,QAAM,OAK9J,cAACH,EAAA,EAAD,CAAQE,QAAQ,YAAYD,MAAM,UAAUqF,UAAU,QAAQ1F,QAASC,KAAKyE,SAA5E,+BAMJ,sBAAK3E,UAAU,QAAf,UACI,cAACK,EAAA,EAAD,CAAQE,QAAQ,YAAYD,MAAOJ,KAAKjB,MAAM6B,OAAOyD,YAAcrE,KAAKjB,MAAM2C,GAAG2C,WAAa,UAAY,UAAWoB,UAAU,QAAQ1F,QAASC,KAAKwE,UAArJ,uBAGA,cAACrE,EAAA,EAAD,CAAQE,QAAQ,YAAYD,MAAOJ,KAAKjB,MAAMsF,WAAa,UAAY,UAAWoB,UAAU,QAAQ1F,QAASC,KAAK2E,WAAlH,wBAMA3E,KAAKjB,MAAM2F,WACV,qBAAK5E,UAAW,uBAAhB,SACG,cAAC,EAAD,CAAenB,OAAQqB,KAAKyE,SACxBxF,KAAMe,KAAKjB,MAAMsG,cAAcpG,KAC/BS,QAASM,KAAKjB,MAAMsG,cAAc3F,QAClCF,KAAQQ,KAAKjB,MAAMsG,cAAc7F,SAEtC,qBAAKM,UAAW,yBAAhB,SACC,cAAC,EAAD,CAAenB,OAAQqB,KAAKyE,SACxBxF,KAAMe,KAAKjB,MAAMsG,cAAcpG,KAC/BS,QAASM,KAAKjB,MAAMsG,cAAc3F,QAClCF,KAAQQ,KAAKjB,MAAMsG,cAAc7F,SAIzCQ,KAAKjB,MAAMsF,WACX,qBAAKvE,UAAU,aAAf,SACI,cAAC,EAAD,CAAYc,OAAQZ,KAAKjB,MAAM6B,OAAQc,GAAI1B,KAAKjB,MAAM2C,OAEtD,KAGJ1B,KAAKjB,MAAM6F,aACP,8BACI,cAAC,EAAD,CAAOrB,UAAYvD,KAAKvB,MAAMO,MAAMC,SAExC,Y,GA9KQsB,aCWboF,MAff,WACE,OACE,sBAAK7F,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,0EAKD,cAAC8F,EAAD,QCHQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16b690ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, Component, propTypes} from \"react\";\r\nimport {Button, Input} from '@material-ui/core';\r\n\r\n\r\nclass EmailTemplate extends Component {\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state =  {\r\n            email: {\r\n                body: this.props.body,\r\n                from: this.props.from,\r\n                to: null,\r\n                subject: this.props.subject\r\n            },\r\n            templateReady: false\r\n        }\r\n       \r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.toggle();\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        const newState = {...this.state.email, body: event.target.value};\r\n        this.setState( {\r\n            email: newState\r\n        }, () => {\r\n            console.log(this.state.email);\r\n        });\r\n    };\r\n\r\n    fromChangeHandler = (event) => {\r\n        const newState = {...this.state.email, from: event.target.value};\r\n        this.setState( {\r\n            email: newState\r\n        }, () => {\r\n            console.log(this.state.email);\r\n        });\r\n    };\r\n\r\n\r\n    subjectChangeHandler = (event) => {\r\n        const newState = {...this.state.email, subject: event.target.value};\r\n        this.setState( {\r\n            email: newState\r\n        }, () => {\r\n            console.log(this.state.email);\r\n        });\r\n    };\r\n\r\n\r\n\r\n    handleSubmit = (event) => {\r\n\r\n        this.setState({...this.state.email, templateReady: true});\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"email\">\r\n            <div className=\"close\" onClick={this.handleClick}>&times;    </div>\r\n            <dl className=\"meta dl-horizontal\">\r\n                <dt>From\r\n                    <input type=\"email\" onChange={this.fromChangeHandler}></input>\r\n                </dt>\r\n                <dd>{this.props.from}</dd>\r\n\r\n                <dt>To</dt>\r\n                <dd>{this.props.to}</dd>\r\n\r\n                <dt>Subject\r\n                    <input type=\"text\" onChange={this.subjectChangeHandler}></input>\r\n                </dt>\r\n                <dd>{this.props.subject}</dd>\r\n            </dl>\r\n            <form>\r\n                <textarea type='text' className=\"body\" value={this.state.email.body} onChange={this.handleChange}></textarea>\r\n                <Button className='save-btn' color=\"primary\" variant=\"contained\" >\r\n                    SAVE\r\n                    <input  type=\"submit\" value=\"Save\"  hidden onClick={this.handleSubmit}/>\r\n                </Button>\r\n            </form>\r\n            \r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default EmailTemplate;","import React, { useEffect, useState } from 'react';\r\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\n\r\n//constand can be changed based on excel col name\r\nconst standards = ['Location', 'TechStack', 'Seniority', 'IOM'];\r\n\r\nconst URL = \"JobURL\";\r\n\r\n\r\nconst MatchTable = (props) => {\r\n    \r\n    const [table, setTable] = useState({\r\n        cols: [...props.talent.cols, \r\n            {name: \"L\", key: 11},\r\n            {name: \"Link 1\", key: 12},\r\n            {name: \"Link 2\", key: 13},\r\n            {name: \"Link 3\", key: 14},\r\n            {name: \"Link 4\", key: 15},\r\n            {name: \"Link 5\", key: 16},\r\n            {name: \"Preview\", key: 17}],\r\n        rows: [...props.talent.rows]\r\n    })\r\n    const [isbuilt,setIsBuilt] = useState(false);\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const [jobs, setJobs] = useState({});\r\n\r\n\r\n\r\n    // Find the standarad col index in both excel\r\n    const buildStandardTable = () => {\r\n        let talentMap = {};\r\n        let jdMap = {};\r\n        for (let standard of standards) {\r\n            for (let index = 0; index < props.talent.rows[0].length; index++) {\r\n                if(props.talent.rows[0][index] === standard){\r\n                    talentMap[standard] = index;\r\n                }\r\n            }\r\n        }\r\n        for (let standard of standards) {\r\n            for (let index = 0; index < props.jd.rows[0].length; index++) {\r\n                if(props.jd.rows[0][index] === standard){\r\n                    jdMap[standard] = index;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return {talentMap, jdMap}\r\n    }\r\n\r\n\r\n    // Take two cretia position map as input\r\n    const matchingAlgo = ({talentMap, jdMap}) => {\r\n        // Key:talent Index; value: {jobIndex: score}\r\n        let matchResult = {};\r\n        let sortedResult = [];\r\n        //\r\n        let talentTable = props.talent.rows.slice(1);\r\n        let jobTable = props.jd.rows.slice(1);\r\n\r\n\r\n        for (let talentIndex = 0; talentIndex < talentTable.length; talentIndex ++) {\r\n\r\n            matchResult[talentIndex] = {};\r\n            sortedResult[talentIndex] = [];\r\n\r\n            for (let jobIndex = 0; jobIndex < jobTable.length; jobIndex ++ ) {\r\n                let jobTalentScore = 0;\r\n\r\n                for (let standard of standards) {\r\n                    // console.log(standard);\r\n\r\n                    if (talentTable[talentIndex][talentMap[standard]] === jobTable[jobIndex][jdMap[standard]]){\r\n                        jobTalentScore ++;\r\n                    }\r\n                }\r\n                // console.log(`index: ${talentIndex}, talent: ${talentTable[talentIndex]}`);\r\n                matchResult[talentIndex][`${jobIndex}`] = jobTalentScore;\r\n            }\r\n            \r\n            sortedResult[talentIndex] = Object.entries( matchResult[talentIndex]).sort((a,b) => b[1] - a[1]).slice(0,5);\r\n\r\n            // console.log('matched scroe', matchResult[talentIndex]);\r\n            // console.log('ranked index', sortedResult[talentIndex]);\r\n        }\r\n\r\n        console.log('whole sorted result', sortedResult);\r\n\r\n        // setIsBuilt(true);\r\n\r\n        return  sortedResult\r\n    };\r\n\r\n\r\n    //Prepare email template job for each candidate, sorted data \r\n    const findJobs = (sortedResult) => {\r\n        let jobTable = [...props.jd.rows].slice(1);\r\n        let emailText = {};\r\n        for (let index = 0; index < sortedResult.length; index ++) {\r\n            emailText[index] = []\r\n            for (let eachJob of sortedResult[index]) {\r\n                emailText[index].push(jobTable[eachJob[0]]);\r\n            }\r\n        }\r\n        return emailText;\r\n    }\r\n\r\n    // Parameter: [[job index: score],[job index: score],[job index: score],[job index: score],[job index: score], ]\r\n    // Find job link for each candidate\r\n    const findJobLink = (jobScoreArray, index) => {\r\n        let jobTalbe = [...props.jd.rows].slice(1);\r\n        let jobLinkPosition = [...props.jd.rows[0]].indexOf(URL);\r\n        let joblinks = [];\r\n        for(let eachJob of jobScoreArray) {\r\n            \r\n            joblinks.push(jobTalbe[eachJob[0]][jobLinkPosition]);\r\n\r\n        }\r\n        // console.log(`findjoblink function: joblinks for ${index} candidate, ${joblinks}`);\r\n        return joblinks;\r\n    }\r\n\r\n    // Give sortedResult of all talents, output display table\r\n    const buildTable = (sortedResult) => {\r\n        let newTableRows = [...props.talent.rows];\r\n        if (isbuilt === false) {\r\n            // console.log(`props table rows before update ${newTableRows}`);\r\n            for (let index = 0; index < sortedResult.length ; index ++) {\r\n                let joblinks = findJobLink(sortedResult[index], index);\r\n                // console.log(`buildTable funcion: job links for cadidate ${index} is ${joblinks}`);\r\n                for (let eachJobLink of joblinks) {\r\n                    newTableRows[index + 1 ].push(eachJobLink);\r\n                }\r\n                \r\n            }\r\n            setIsBuilt(true);\r\n            return newTableRows;\r\n        } else {\r\n            return newTableRows;\r\n        }\r\n    }\r\n \r\n    // Create standard map, get the posiiton of each criteria\r\n    // Get sorted results for each talent\r\n    // Append the data to original talent table\r\n        \r\n\r\n    useEffect(() => {\r\n\r\n        const {talentMap , jdMap} = buildStandardTable();\r\n        const  sortedResult = matchingAlgo({talentMap,jdMap});\r\n        let newTableRows = buildTable(sortedResult);\r\n        let emailText = findJobs(sortedResult);\r\n\r\n        setTable({\r\n            cols: [...table.cols],\r\n            rows: newTableRows           \r\n        });\r\n        setReady(true);\r\n        console.log(emailText);\r\n    }, [isbuilt]);\r\n       \r\n    useEffect(() => {\r\n        console.log('table update', table);\r\n    },[table])\r\n\r\n    useEffect(() => {\r\n        console.log('isbuilt update', isbuilt);\r\n    },[isbuilt])\r\n\r\n    useEffect(() => {\r\n        console.log('ready update', ready);\r\n    },[ready])\r\n\r\n    useEffect(()=> {\r\n        setIsBuilt(false);\r\n    }, [props]);\r\n\r\n    return ( \r\n        \r\n        <div className='table'>\r\n         {  ready ?  <OutTable data={table.rows} columns={table.cols}  tableClassName=\"matchedDataTable\"/> : <CircularProgress/> }\r\n        </div>\r\n          \r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default MatchTable;\r\n","import React, { useState, Component, propTypes} from \"react\";\r\nimport {Button, Input} from '@material-ui/core';\r\n\r\nconst Email = (props) => {\r\n    return (\r\n        <div className=\"email\">\r\n            <label>Candidate Index: </label>\r\n            <input type=\"number\"/>\r\n            <div className=\"close\" onClick={this.handleClick}>&times;    </div>\r\n\r\n            <p>{props.email.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Email;","import React, { useState, Component} from \"react\";\r\n\r\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\r\nimport {Button, Input} from '@material-ui/core';\r\nimport EmailTemplate from './EmailTemplate';\r\nimport MatchTable from './MatchTable';\r\nimport '../assets/email.css';\r\nimport '../assets/table.css';\r\nimport Email from \"./Email\";\r\n\r\nclass ExcelImporter extends Component  {\r\n    constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n        talent:{\r\n            cols: null,\r\n            rows: null,\r\n            dataLoaded: false\r\n        },\r\n        jd: {\r\n            cols: null,\r\n            rows: null,\r\n            dataLoaded: false\r\n        },\r\n        matchedJobs: {\r\n            cols: {\r\n                talentName: \"Talent Name\",\r\n                email:\" Email\",\r\n                location: \" Location\",\r\n                seniority: \"Seniority\",\r\n                techstack: \"Tech Stack\",\r\n                IOM: \"IOM\",\r\n                jobLinks: \"Job Links\",\r\n                linkedIn: \"\"\r\n            },\r\n            rows: null,\r\n            dataLoaded: false\r\n        },\r\n        emailTemplate: {\r\n            subject: null,\r\n            body: \"Hi, \\n This is Kirby who has connected with you on LinkedIn several days ago. I would like to share the open opportunities that could be a good match for you.  Meanwhile, I’d love to send the job openings that could be a good fit along with our insights to you every week. Hope the information could help you more with your career choice. \\n \",\r\n            matchedPosition: null,\r\n            close: \"Thanks, Kirby\",\r\n            from: null\r\n        },\r\n        emailPoped: false,\r\n        dataLoaded: false,\r\n        previewPoped:false\r\n\r\n    };\r\n\r\n    this.talentHandler = this.talentHandler.bind(this);\r\n    this.jdHandler = this.jdHandler.bind(this);\r\n    this.emailPop = this.emailPop.bind(this);\r\n    this.matchData = this.matchData.bind(this);\r\n    }\r\n\r\n    talentHandler = (event) => {\r\n        let fileObj = event.target.files[0];\r\n        ExcelRenderer(fileObj, (err, res) => {\r\n            if (err) {\r\n                console.log('error', err)\r\n            } else {\r\n                this.setState({\r\n                    talent: {\r\n                        cols:res.cols,\r\n                        rows:res.rows,\r\n                        dataLoaded:true,\r\n                    }\r\n                }, () => {\r\n                    console.log(this.state);\r\n                    alert(\"Talent Data is Uploaded\");\r\n                });\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    jdHandler = (event) => {\r\n        let fileObj = event.target.files[0];\r\n        ExcelRenderer(fileObj, (err, res) => {\r\n            if (err) {\r\n                console.log('error', err)\r\n            } else {\r\n                this.setState({\r\n                    jd: {\r\n                        cols:res.cols,\r\n                        rows:res.rows,\r\n                        dataLoaded:true,\r\n                    }\r\n                }, () => {\r\n                    console.log(this.state);\r\n                    alert(\"Job Description is Uploaded\");\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    matchData = () => {\r\n        if (this.state.talent.dataLoaded && this.state.jd.dataLoaded) {\r\n            this.setState({dataLoaded: true}, () => {\r\n                console.log(this.state);\r\n            });\r\n        }\r\n    }\r\n\r\n    emailPop = (event) => {\r\n        this.setState({\r\n            emailPoped:! (this.state.emailPoped)\r\n        }, () => {\r\n            console.log(this.state);\r\n        });\r\n    }\r\n    \r\n    previewPop = (event) => {\r\n        this.setState({\r\n            emailPoped:! (this.state.previewPoped)\r\n        }, () => {\r\n            console.log(this.state);\r\n        });\r\n    }\r\n\r\n    render () \r\n        {\r\n            \r\n        return (\r\n        <div className='container'>\r\n            <div className=\"links\">\r\n\r\n                <Button variant=\"contained\" color=\"primary\" component=\"label\">\r\n                    Talent Import\r\n                    <input type='file' accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" onChange = {this.talentHandler} hidden></input>\r\n                </Button>\r\n\r\n                <Button variant=\"contained\" color=\"primary\" component=\"label\">\r\n                    JD Import\r\n                    <input type='file' accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" onChange = {this.jdHandler} hidden></input>\r\n                </Button>\r\n                {/* {this.state.talent.dataLoaded ? \r\n                    <OutTable data={this.state.talent.rows} columns={this.state.talent.cols}/> : <p>error</p>} */}\r\n                \r\n                <Button variant=\"contained\" color=\"primary\" component=\"label\" onClick={this.emailPop}>\r\n                    Email Template\r\n                </Button>\r\n            </div>\r\n            \r\n            \r\n            <div className='links'>\r\n                <Button variant=\"contained\" color={this.state.talent.dataLoaded && this.state.jd.dataLoaded ? 'primary' : \"default\"} component=\"label\" onClick={this.matchData}>\r\n                    Load Data\r\n                </Button>\r\n                <Button variant=\"contained\" color={this.state.dataLoaded ? 'primary' : \"default\"} component=\"label\" onClick={this.previewPop}>\r\n                    Preview\r\n                </Button>\r\n            </div>\r\n\r\n            {\r\n                this.state.emailPoped ? \r\n                (<div className ='email-container show'> \r\n                    <EmailTemplate toggle={this.emailPop} \r\n                        body={this.state.emailTemplate.body} \r\n                        subject={this.state.emailTemplate.subject}\r\n                        from = {this.state.emailTemplate.from}/> \r\n                </div>)\r\n                : (<div className ='email-container hidden'> \r\n                    <EmailTemplate toggle={this.emailPop} \r\n                        body={this.state.emailTemplate.body} \r\n                        subject={this.state.emailTemplate.subject}\r\n                        from = {this.state.emailTemplate.from}/> \r\n            </div>)\r\n            }\r\n            {\r\n                this.state.dataLoaded ? (\r\n                <div className=\"data-talbe\">\r\n                    <MatchTable talent={this.state.talent} jd={this.state.jd} />\r\n                </div>\r\n                ) : null\r\n            }\r\n            {\r\n                this.state.previewPoped ? (\r\n                    <div>\r\n                        <Email emailText ={this.props.email.body} />\r\n                    </div>\r\n                ) : null\r\n            }\r\n        </div>\r\n          \r\n\r\n    )\r\n    }\r\n    \r\n};\r\n\r\nexport default ExcelImporter;","import logo from './logo.svg';\nimport './App.css';\nimport {Button, Input} from '@material-ui/core';\nimport ExcelImporter from './components/ExcelImport';\nimport Email from './components/Email';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          OCInsights Automated Newsletter System\n        </h1>\n      </header>\n\n       <ExcelImporter/>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}